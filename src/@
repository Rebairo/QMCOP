# MAIN QMC PROGRAM:
import sys
import qgen
import scipy
import os
import numpy as np
from scipy.stats import qmc
import math
import pandas as pd
import random
import energy

from openmm.app import *
from openmm import *
from openmm.unit import *
#Provide an index to choose Sobol-1/RandomLHS-2/OrhtogonalLHS-3/Halton-4 quasi-random sequences:








#Function defs:
def read_inp(inpfile):

    with open(inpfile,'r')as f:
        inp=[]
        for i,j in enumerate(f):
            if i==0:
                path = str(j.split()[0])
            if i==1:
                mname = str(j.split()[0])
            if i==3:
                nstr=int(j.split()[0])
            if i==10:
                indq=int(j.split()[1])
            if i==11:
                npars=int(j.split()[1])
            if i==12:
                search_sp=float(j.split()[1])
          
                
    return nstr,indq,npars,path,mname,search_sp

def molsread(inpfile):
    with open(inpfile) as f:
        for i,j in enumerate(f):
            lines=i
    sp = int(np.round(lines/nstr))

    spdb=None
    with open(inpfile) as f:

        for i,j in enumerate(f):
            if i%sp==0:
                if spdb:
                    spdb.close()
                o = int(i/sp)
                s_pdb=os.path.join(spath,'{}.pdb'.format(o))
                spdb = open(s_pdb,'w')
            spdb.write(j)
        if spdb:
            spdb.close()
    return sp


#Get Input Vars:
nstr,ind,npar,path,mname,search_sp  =  read_inp('usermols.inp')

#Run Initial Sample:
if ind==1:
    s,b=qgen.sobol(npar,nstr)

#Initial Conformation generation:
os.system("./lmols")

#Set files and folders:
mode = 0o777
sampled = 'QMC_SAMPLED'
spath = os.path.join(path,sampled)
os.makedirs(spath,mode,exist_ok=True)

#For accepted conformations:
ffpdb = "{}_sobol.pdb".format(mname)

fpdb = os.path.join(path,ffpdb)
#Use conformations and split them:
molsfile = '{}_mols.pdb'.format(mname)
sp = molsread(os.path.join(path,molsfile))
#Loop over cycles to get structures:
#Applying Baker transformation:
mnum =[]
open(fpdb,'w').close()
for i in (os.listdir(spath)):
    pdb =   PDBFile(os.path.join(spath,i))
    ENE = energy.energy(pdb)
    mno = int(i.partition('.')[0])
    print(ENE)
    if ENE<100.0:
        with open(fpdb,'a') as q:
            q.write('%s %d %f\n'%("MODEL",mno,ENE))
    else:
        mnum.append(mno)
print(mnum) 
unf=[]
open("unf.dat","w").close()


with open ('mols_q.out','r+') as ff:
        for j in ff.readlines():
            for k in mnum:
                if(k==int(j.split()[0])):
                    with open("unf.dat","a") as hh:
                        hh.write('%s'%(j)) 

                
#dtors = pd.read_csv('unf.dat',header=None,delim_whitespace=True)
#ddtors = (dtors.iloc[:,1:])
#u_shift=[]

#u_shift.append(ddtors[:,:])-random.uniform(0.0,(search_sp/3))

unfdat = []
with open('unf.dat','r+') as fg:
    kk = fg.readlines()    
    for i in kk:
        unfdat.append(i.split()[1:])
    
udat = np.around(np.asarray(unfdat,dtype=float),decimals=2)


print(udat)
sdat = []
# SHift:
for i,j in enumerate(np.transpose(udat)):
    #sdat[i] = udat[i]-random.uniform(0.0,((search_sp)/3))
    sdat.append(udat[i])

sdat = np.asarray(sdat,dtype=float),decimals=2)
print(np.transpose(udat-sdat))
#print(np.transpose(sdat))
sout = "qmcscore.ot"
score = os.path.join(path,sout)
     
#os.system("./pdbread")
#os.system("./clust")
#os.system("./diheds")
#qgen.writeang(s,npar,b)
